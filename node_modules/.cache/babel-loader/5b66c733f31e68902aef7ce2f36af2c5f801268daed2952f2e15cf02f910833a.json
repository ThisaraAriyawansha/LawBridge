{"ast":null,"code":"var _jsxFileName = \"D:\\\\NIBM\\\\Project\\\\React\\\\Legal Case Management System\\\\LawBridge\\\\src\\\\components\\\\ReceiveMessage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceiveMessage = () => {\n  _s();\n  const [receivedMessage, setReceivedMessage] = useState('');\n  const [key, setKey] = useState(null);\n  useEffect(() => {\n    const generateKey = async () => {\n      const cryptoKey = await window.crypto.subtle.generateKey({\n        name: 'AES-GCM',\n        length: 256\n      }, true, ['encrypt', 'decrypt']);\n      setKey(cryptoKey);\n    };\n    generateKey();\n  }, []);\n  useEffect(() => {\n    const fetchMessage = async () => {\n      if (!key) {\n        console.error('Decryption key not ready');\n        return;\n      }\n      try {\n        const response = await axios.get('http://localhost:5000/api/receive-message');\n        const encryptedMessage = response.data.encryptedMessage.split(',').map(Number);\n        const iv = new Uint8Array(12); // Replace with the actual IV used during encryption\n\n        const decryptedData = await window.crypto.subtle.decrypt({\n          name: 'AES-GCM',\n          iv: iv\n        }, key, Uint8Array.from(encryptedMessage));\n        const decryptedMessage = new TextDecoder().decode(decryptedData);\n        setReceivedMessage(decryptedMessage);\n      } catch (error) {\n        console.error('Error fetching message:', error);\n      }\n    };\n    fetchMessage();\n  }, [key]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: receivedMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Received Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: receivedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No message received\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceiveMessage, \"7rhtj183BlsFIRTigRIYPcjroBk=\");\n_c = ReceiveMessage;\nexport default ReceiveMessage;\nvar _c;\n$RefreshReg$(_c, \"ReceiveMessage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ReceiveMessage","_s","receivedMessage","setReceivedMessage","key","setKey","generateKey","cryptoKey","window","crypto","subtle","name","length","fetchMessage","console","error","response","get","encryptedMessage","data","split","map","Number","iv","Uint8Array","decryptedData","decrypt","from","decryptedMessage","TextDecoder","decode","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/NIBM/Project/React/Legal Case Management System/LawBridge/src/components/ReceiveMessage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ReceiveMessage = () => {\r\n  const [receivedMessage, setReceivedMessage] = useState('');\r\n  const [key, setKey] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const generateKey = async () => {\r\n      const cryptoKey = await window.crypto.subtle.generateKey(\r\n        {\r\n          name: 'AES-GCM',\r\n          length: 256,\r\n        },\r\n        true,\r\n        ['encrypt', 'decrypt']\r\n      );\r\n      setKey(cryptoKey);\r\n    };\r\n\r\n    generateKey();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMessage = async () => {\r\n      if (!key) {\r\n        console.error('Decryption key not ready');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/receive-message');\r\n        const encryptedMessage = response.data.encryptedMessage.split(',').map(Number);\r\n        const iv = new Uint8Array(12); // Replace with the actual IV used during encryption\r\n\r\n        const decryptedData = await window.crypto.subtle.decrypt(\r\n          {\r\n            name: 'AES-GCM',\r\n            iv: iv,\r\n          },\r\n          key,\r\n          Uint8Array.from(encryptedMessage)\r\n        );\r\n\r\n        const decryptedMessage = new TextDecoder().decode(decryptedData);\r\n        setReceivedMessage(decryptedMessage);\r\n      } catch (error) {\r\n        console.error('Error fetching message:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessage();\r\n  }, [key]);\r\n\r\n  return (\r\n    <div>\r\n      {receivedMessage ? (\r\n        <div>\r\n          <h3>Received Message</h3>\r\n          <p>{receivedMessage}</p>\r\n        </div>\r\n      ) : (\r\n        <p>No message received</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceiveMessage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,SAAS,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACJ,WAAW,CACtD;QACEK,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,EACD,IAAI,EACJ,CAAC,SAAS,EAAE,SAAS,CACvB,CAAC;MACDP,MAAM,CAACE,SAAS,CAAC;IACnB,CAAC;IAEDD,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACd,MAAMiB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACT,GAAG,EAAE;QACRU,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;QACzC;MACF;MAEA,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,2CAA2C,CAAC;QAC7E,MAAMC,gBAAgB,GAAGF,QAAQ,CAACG,IAAI,CAACD,gBAAgB,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;QAC9E,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;QAE/B,MAAMC,aAAa,GAAG,MAAMjB,MAAM,CAACC,MAAM,CAACC,MAAM,CAACgB,OAAO,CACtD;UACEf,IAAI,EAAE,SAAS;UACfY,EAAE,EAAEA;QACN,CAAC,EACDnB,GAAG,EACHoB,UAAU,CAACG,IAAI,CAACT,gBAAgB,CAClC,CAAC;QAED,MAAMU,gBAAgB,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACL,aAAa,CAAC;QAChEtB,kBAAkB,CAACyB,gBAAgB,CAAC;MACtC,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDF,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACT,GAAG,CAAC,CAAC;EAET,oBACEL,OAAA;IAAAgC,QAAA,EACG7B,eAAe,gBACdH,OAAA;MAAAgC,QAAA,gBACEhC,OAAA;QAAAgC,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBpC,OAAA;QAAAgC,QAAA,EAAI7B;MAAe;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,gBAENpC,OAAA;MAAAgC,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC1B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClC,EAAA,CA/DID,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AAiEpB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}