{"ast":null,"code":"var _jsxFileName = \"D:\\\\NIBM\\\\Project\\\\React\\\\Legal Case Management System\\\\LawBridge\\\\src\\\\components\\\\SendMessage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SendMessage = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [sentMessage, setSentMessage] = useState('');\n  const [key, setKey] = useState(null);\n  useEffect(() => {\n    const generateKey = async () => {\n      const cryptoKey = await window.crypto.subtle.generateKey({\n        name: 'AES-GCM',\n        length: 256\n      }, true, ['encrypt', 'decrypt']);\n      setKey(cryptoKey);\n    };\n    generateKey();\n  }, []);\n  const sendMessage = async () => {\n    if (!key) {\n      console.error('Encryption key not ready');\n      return;\n    }\n    try {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(message);\n      const iv = window.crypto.getRandomValues(new Uint8Array(12)); // Initialization vector\n\n      const encryptedData = await window.crypto.subtle.encrypt({\n        name: 'AES-GCM',\n        iv: iv\n      }, key, data);\n      const encryptedMessage = Array.from(new Uint8Array(encryptedData)).join(',');\n      const response = await axios.post('http://localhost:5000/api/send-message', {\n        encryptedMessage\n      });\n      console.log('Message sent:', response.data);\n      setSentMessage(response.data.message);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Enter your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), sentMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Sent Message: \", sentMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(SendMessage, \"rTvzKYAwKYjCbjpUxh7LKKXPjqA=\");\n_c = SendMessage;\nexport default SendMessage;\nvar _c;\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Navbar","Footer","jsxDEV","_jsxDEV","SendMessage","_s","message","setMessage","sentMessage","setSentMessage","key","setKey","generateKey","cryptoKey","window","crypto","subtle","name","length","sendMessage","console","error","encoder","TextEncoder","data","encode","iv","getRandomValues","Uint8Array","encryptedData","encrypt","encryptedMessage","Array","from","join","response","post","log","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/NIBM/Project/React/Legal Case Management System/LawBridge/src/components/SendMessage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n\r\nconst SendMessage = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [sentMessage, setSentMessage] = useState('');\r\n  const [key, setKey] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const generateKey = async () => {\r\n      const cryptoKey = await window.crypto.subtle.generateKey(\r\n        {\r\n          name: 'AES-GCM',\r\n          length: 256,\r\n        },\r\n        true,\r\n        ['encrypt', 'decrypt']\r\n      );\r\n      setKey(cryptoKey);\r\n    };\r\n\r\n    generateKey();\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (!key) {\r\n      console.error('Encryption key not ready');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const encoder = new TextEncoder();\r\n      const data = encoder.encode(message);\r\n      const iv = window.crypto.getRandomValues(new Uint8Array(12)); // Initialization vector\r\n\r\n      const encryptedData = await window.crypto.subtle.encrypt(\r\n        {\r\n          name: 'AES-GCM',\r\n          iv: iv,\r\n        },\r\n        key,\r\n        data\r\n      );\r\n\r\n      const encryptedMessage = Array.from(new Uint8Array(encryptedData)).join(',');\r\n\r\n      const response = await axios.post('http://localhost:5000/api/send-message', { encryptedMessage });\r\n      console.log('Message sent:', response.data);\r\n      setSentMessage(response.data.message);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <div>\r\n      <textarea value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Enter your message\" />\r\n      <button onClick={sendMessage}>Send Message</button>\r\n      {sentMessage && <div>Sent Message: {sentMessage}</div>}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendMessage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}